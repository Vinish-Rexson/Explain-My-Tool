const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'GET, OPTIONS',
}

interface TavusPollRequest {
  projectId: string
}

// Logging utility
function log(step: string, message: string, data?: any) {
  const timestamp = new Date().toISOString()
  console.log(`[${timestamp}] üé¨ TAVUS_POLL - ${step}: ${message}`)
  if (data) {
    console.log(`[${timestamp}] üìä Data:`, JSON.stringify(data, null, 2))
  }
}

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    log('INIT', 'üöÄ Starting Tavus video polling')
    
    const url = new URL(req.url)
    const projectId = url.searchParams.get('projectId')
    
    if (!projectId) {
      throw new Error('Project ID is required')
    }
    
    log('REQUEST', 'Polling Tavus video status', { projectId })

    // Initialize Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // Get project with Tavus video ID
    const { data: project, error: projectError } = await supabaseClient
      .from('projects')
      .select('tavus_video_id, status, video_url')
      .eq('id', projectId)
      .single()

    if (projectError || !project) {
      log('ERROR', '‚ùå Project not found', projectError)
      throw new Error('Project not found')
    }

    if (!project.tavus_video_id) {
      log('INFO', 'üìù No Tavus video ID found for project')
      return new Response(
        JSON.stringify({
          success: true,
          status: project.status,
          videoUrl: project.video_url,
          message: 'No Tavus video associated with this project'
        }),
        {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200,
        },
      )
    }

    // Check Tavus API for video status
    const tavusApiKey = Deno.env.get('TAVUS_API_KEY')
    if (!tavusApiKey) {
      log('ERROR', '‚ùå Tavus API key not configured')
      throw new Error('Tavus API key not configured')
    }

    log('TAVUS', 'üì° Checking Tavus video status', { videoId: project.tavus_video_id })
    const response = await fetch(`https://tavusapi.com/v2/videos/${project.tavus_video_id}`, {
      headers: {
        'x-api-key': tavusApiKey,
      },
    })

    if (!response.ok) {
      log('ERROR', '‚ùå Failed to fetch Tavus video status', { status: response.status })
      throw new Error(`Failed to fetch Tavus video status: ${response.status}`)
    }

    const tavusData = await response.json()
    log('TAVUS', 'üìä Received Tavus video status', {
      status: tavusData.status,
      progress: tavusData.progress || 'N/A'
    })

    // If video is completed and we don't have the URL yet, update the project
    if (tavusData.status === 'completed' && tavusData.download_url && project.status !== 'completed') {
      log('DATABASE', 'üíæ Updating project with completed Tavus video')
      const { error: updateError } = await supabaseClient
        .from('projects')
        .update({
          video_url: tavusData.download_url,
          status: 'completed',
          updated_at: new Date().toISOString()
        })
        .eq('id', projectId)

      if (updateError) {
        log('ERROR', '‚ùå Failed to update project with video URL', updateError)
      } else {
        log('SUCCESS', '‚úÖ Project updated with completed video')
      }

      return new Response(
        JSON.stringify({
          success: true,
          status: 'completed',
          videoUrl: tavusData.download_url,
          tavusStatus: tavusData.status,
          progress: tavusData.progress,
          message: 'Video generation completed!'
        }),
        {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200,
        },
      )
    }

    // Return current status
    return new Response(
      JSON.stringify({
        success: true,
        status: project.status,
        videoUrl: project.video_url,
        tavusStatus: tavusData.status,
        progress: tavusData.progress,
        message: tavusData.status === 'processing' 
          ? 'Video is still being generated by Tavus...' 
          : `Video status: ${tavusData.status}`
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    )

  } catch (error) {
    log('ERROR', 'üí• Fatal error during Tavus polling', {
      error: error.message,
      stack: error.stack
    })

    return new Response(
      JSON.stringify({ 
        error: error.message,
        details: 'Check the function logs for detailed error information'
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      },
    )
  }
})

// Import createClient function
import { createClient } from 'npm:@supabase/supabase-js@2'